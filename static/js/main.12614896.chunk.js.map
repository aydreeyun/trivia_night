{"version":3,"sources":["components/splash.js","util/shuffle.js","components/question.js","components/app.js","index.js"],"names":["Splash","handleStart","className","onClick","href","target","shuffle","arr","i","length","randIdx","Math","floor","random","Question","useState","score","setScore","question","setQuestion","answers","setAnswers","correct","setCorrect","userAnswer","setUserAnswer","questionNum","setQuestionNum","useEffect","data","resetButtons","questionAnswers","Array","from","document","querySelectorAll","answer","classList","remove","choices","incorrect","add","value","findCorrectAnswer","e","preventDefault","handleNextQuestion","map","el","handleAnswer","disabled","handlePlayAgain","App","started","setStarted","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.12614896.chunk.js","sourcesContent":["import React from 'react';\n\nconst Splash = ({ handleStart }) => {\n  return (\n    <div className=\"splash\">\n      <div className=\"splash-main\">\n        <h1 className=\"splash-header\">Welcome to Trivia Night!</h1>\n        <div className=\"splash-rules\">\n          <ul>Rules:\n            <li>There are 10 questions, try to get as many points as you can</li>\n            <li>There are 4 choices and only ONE is correct</li>\n            <li>Each correct question will award you 10 points</li>\n            <li>There is no time limit, take as much time as you need</li>\n            <li>Refreshing the page will reset the round</li>\n            <li>HAVE FUN!!</li>\n          </ul>\n        </div>\n        <button className=\"splash-button\"\n          onClick={handleStart}>\n          START\n        </button>\n      </div>\n      <div className=\"splash-footer\">\n        <p>Adrian Kim © 2020</p>\n        <a href=\"https://www.linkedin.com/in/adriantaehyunkim/\" target=\"_blank\">LinkedIn</a>\n        <a href=\"https://aydreeyun.github.io/\" target=\"_blank\">Portfolio</a>\n        <a href=\"https://github.com/aydreeyun\" target=\"_blank\">GitHub</a>\n      </div>\n    </div>\n  );\n};\n\nexport default Splash;","export const shuffle = arr => {\n  for (let i = 0; i < arr.length; i++) {\n    const randIdx = Math.floor(Math.random() * arr.length);\n    [arr[i], arr[randIdx]] = [arr[randIdx], arr[i]];\n  }\n};","import React, { useState, useEffect } from 'react';\nimport data from '../data/Apprentice_TandemFor400_Data.json';\nimport { shuffle } from '../util/shuffle';\n\nconst Question = () => {\n  // React local state w/ hooks\n  const [score, setScore] = useState(0);\n  const [question, setQuestion] = useState(\"\");\n  const [answers, setAnswers] = useState([]);\n  const [correct, setCorrect] = useState(\"\");\n  const [userAnswer, setUserAnswer] = useState(null);\n  const [questionNum, setQuestionNum] = useState(0);\n\n  // On component did mount, shuffle the array of questions\n  useEffect(() => shuffle(data), []);\n  \n  const handleAnswer = e => {\n    e.preventDefault();\n    setUserAnswer(e.target.value);\n  }\n\n  const handleNextQuestion = e => {\n    e.preventDefault();\n    \n    setUserAnswer(null);\n    resetButtons();\n    setQuestionNum(questionNum + 1);\n  }\n\n  const handlePlayAgain = e => {\n    e.preventDefault();\n\n    shuffle(data);\n\n    setQuestionNum(0);\n    setScore(0);\n  }\n\n  const findCorrectAnswer = () => {\n    const questionAnswers = Array.from(document.querySelectorAll(\".question-answer\"));\n\n    for (let i = 0; i < questionAnswers.length; i++) {\n      const answer = questionAnswers[i];\n\n      answer.classList.add('gray');\n\n      if (answer.value === correct) answer.classList.add('green');\n      if (userAnswer === answer.value && userAnswer !== correct) answer.classList.add('red');\n    }\n  }\n\n  const resetButtons = () => {\n    const questionAnswers = Array.from(document.querySelectorAll(\".question-answer\"));\n\n    for (let i = 0; i < questionAnswers.length; i++) {\n      const answer = questionAnswers[i];\n\n      answer.classList.remove('green');\n      answer.classList.remove('red');\n      answer.classList.remove('gray');\n    }\n  }\n\n  // On update of the question number - update the question, answers, and correct answer\n  useEffect(() => {\n    setQuestion(data[questionNum].question);\n\n    // set answer choices to array of both incorrect and correct\n    const choices = [...data[questionNum].incorrect, data[questionNum].correct];\n    // shuffle the answer choices to prevent muscle memory answering\n    shuffle(choices);\n\n    setAnswers(choices);\n    setCorrect(data[questionNum].correct);\n  }, [questionNum]);\n\n  // On update of the user answer - check if answer matches correct answer and increment score\n  useEffect(() => {\n    // sets correct answer to green and wrong answer to red\n    if (userAnswer) findCorrectAnswer();\n    if (userAnswer === correct) setScore(score + 10);\n  }, [userAnswer]);\n\n  // Answer choices\n  const renderAnswers = () => (\n    answers.map((el, i) => (\n      <button \n        className=\"question-answer\"\n        onClick={e => handleAnswer(e)}\n        key={i}\n        value={el}\n        disabled={userAnswer ? true : false}\n      >\n        {el}\n      </button>\n    ))\n  );\n\n  if (questionNum < 10) {\n    return (\n      <div className=\"question\">\n        <div className=\"question-header\">\n          <div className=\"question-num\">QUESTION {questionNum + 1} / 10</div>\n          <div className=\"question-score\">SCORE: {score}</div>\n        </div>\n        <div className=\"question-mid\">\n          <div className=\"question-main\">{question}</div>\n          <div className=\"question-next\">\n            {userAnswer ? <button className=\"question-next-button\" onClick={e => handleNextQuestion(e)}>{'>>'}</button> : null}\n          </div>\n        </div>\n        <div className=\"question-answer-main\">\n          {renderAnswers()}\n        </div>\n        \n      </div>\n    )\n  } else {\n    return (\n      <div className=\"trivia-end\">\n        <div className=\"trivia-end-main\">\n          <div className=\"trivia-end-score\">Your final score: {score}</div>\n          <button className=\"trivia-end-button\"\n            onClick={e => handlePlayAgain(e)}>\n              PLAY AGAIN\n          </button>\n        </div>\n        <div className=\"trivia-end-footer\">\n          <p>Adrian Kim © 2020</p>\n          <a href=\"https://www.linkedin.com/in/adriantaehyunkim/\" target=\"_blank\">LinkedIn</a>\n          <a href=\"https://aydreeyun.github.io/\" target=\"_blank\">Portfolio</a>\n          <a href=\"https://github.com/aydreeyun\" target=\"_blank\">GitHub</a>\n        </div>\n      </div>\n    )\n  }\n};\n\nexport default Question;","import React, { useState } from 'react';\nimport Splash from './splash';\nimport Question from './question';\n\nconst App = () => {\n  const [started, setStarted] = useState(false);\n  const handleStart = () => setStarted(true);\n\n  return started ? <Question /> : <Splash handleStart={handleStart} />;\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\n// STYLESHEETS\nimport './styles/reset.scss';\nimport './styles/splash.scss';\nimport './styles/question.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}